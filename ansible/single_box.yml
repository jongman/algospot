# Algospot ansible settings
# vim: set et ts=2 sts=2 sw=2

- name: "update apt repository cache"
  apt: update_cache=yes cache_valid_time=3600
  sudo: yes

- name: "install apt packages"
  apt: name={{item}} state=present
  sudo: yes
  with_items:
  - python-setuptools
  - python-dev
  - build-essential
  - git-core
  - libjpeg-dev
  - rabbitmq-server
  - redis-server
  - postgresql-9.3
  - postgresql-contrib-9.3
  - postgresql-server-dev-9.3
  - lxc
  - aufs-tools
  - ghc
  - ruby
  - luajit
  - pypy
  - python3

- name: "install pip"
  sudo: yes
  easy_install: name=pip

- name: "install python dependencies"
  sudo: yes
  pip: name={{item}}
  with_items:
  - Django==1.6.5
  - Pygments==2.0.2
  - South==0.8.1
  - Whoosh==2.6.0
  - celery==3.1.12
  - django-appconf==0.6
  - django-attachments==0.3.1
  - django-avatar==2.0
  - django-celery==3.1.10
  - django-debug-toolbar==1.2.1
  - django-extensions==1.3.8
  - django-guardian==1.2.0
  - django-haystack==2.1.0
  - django-picklefield==0.3.1
  - django-staticfiles==1.2.1
  - django-tagging==0.3.2
  - ipdb==0.7
  - ipython==0.13.2
  - redis==2.7.6
  - pygooglechart==0.4.0
  - uwsgi
  - Pillow
  - psycopg2
  - dogslow
  - icalendar
  - pytz
  - python-apt

# Java

- name: "oracle java ppa"
  sudo: yes
  apt_repository: repo='ppa:webupd8team/java'

- name: "disable interactive installer for oracle java"
  sudo: yes
  shell: echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections

- name: "disable interactive installer for oracle java"
  sudo: yes
  shell: echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections

- name: "install oracle java"
  sudo: yes
  apt: name=oracle-java8-installer

# Scala

- name: "checking wheter scala exists ..."
  command: scalac -version
  register: scala_version
  ignore_errors: True

- name: "download scala 2.11.1"
  when: scala_version|failed or scala_version.stderr.find('2.11.1') == -1
  sudo: yes
  get_url: url=http://downloads.typesafe.com/scala/2.11.1/scala-2.11.1.deb dest=/tmp

- name: "install scala 2.11.1"
  when: scala_version|failed or scala_version.stderr.find('2.11.1') == -1
  sudo: yes
  shell: dpkg --skip-same-version -i /tmp/scala-2.11.1.deb

# Rust

- name: "checking whether rust exists ..."
  command: rustc --version
  register: rustc_version
  ignore_errors: True

- name: "download and install rust 1.11.0 (64bit binary)"
  when: rustc_version|failed or rustc_version.stdout.find('rustc 1.11.0') == -1
  sudo: yes
  shell: curl -s https://static.rust-lang.org/rustup.sh > /tmp/rustup.sh && chmod +x /tmp/rustup.sh && /tmp/rustup.sh --yes

# Go

- name: "checking whether go version ..."
  command: go version
  register: go_version
  ignore_errors: True

- name: "add go stable"
  when: go_version|failed or go_version.stdout.find('go1.6') == -1
  sudo: yes
  apt_repository: repo='ppa:ubuntu-lxc/lxd-stable'

- name:	"install go 1.6 (64bit binary)"
  when: go_version|failed or go_version.stdout.find('go1.6') == -1
  sudo: yes
  apt: name=golang

# -----------------

- name: "add nginx stable"
  sudo: yes
  apt_repository: repo='ppa:nginx/stable'

- name: "install nginx"
  sudo: yes
  apt: name=nginx

- name: "install modified misaka"
  sudo: yes
  shell: cd {{home_dir}}/libs/misaka; python setup.py install

- name: "install django-registration"
  sudo: yes
  shell: cd {{home_dir}}/libs/django-registration; python setup.py install

- name: "create postgres user"
  postgresql_user: name={{user}} role_attr_flags=SUPERUSER
  sudo_user: postgres
  sudo: yes

- name: "create postgres user root"
  postgresql_user: name=root role_attr_flags=SUPERUSER
  sudo_user: postgres
  sudo: yes

- name: "create algospot database"
  postgresql_db: name=algospot
  sudo: yes
  sudo_user: postgres

- name: "add permission for root (used for celeryd)"
  postgresql_privs: database=algospot privs=ALL type=database role=root
  sudo: yes
  sudo_user: postgres

- name: "django syncdb"
  django_manage: command=syncdb app_path={{django_dir}}

- name: "load base data (must come before migrate!)"
  django_manage: command=loaddata app_path={{django_dir}} fixtures=base/fixtures/group_fixtures.json

- name: "migrate base first"
  shell: ./manage.py migrate base chdir={{django_dir}}

- name: "django migrate"
  django_manage: command=migrate app_path={{django_dir}}

- name: "load superuser"
  django_manage: command=loaddata app_path={{django_dir}} fixtures=base/fixtures/superuser_fixtures.json

- name: "load all remaining fixutres"
  django_manage: command=loaddata app_path={{django_dir}} fixtures={{item}}
  with_items:
    - base/fixtures/guardian_fixtures.json
    - forum/fixtures/fixtures.json
    - judge/fixtures/fixtures.json
    - wiki/fixtures/fixtures.json
  ignore_errors: True  # there might be a duplicated load

- name: "collectstatic"
  django_manage: command=collectstatic app_path={{django_dir}}

- name: "make media directory/whoosh index directory"
  sudo: yes
  file: path={{item}} owner=www-data group=www-data state=directory
  with_items:
    - /www-media
    - /www-media/judge-attachments
    - /whoosh_index
    - /var/log/dogslow

- name: "make user part of www-data group (dev only)"
  sudo: yes
  user: name={{user}} groups=www-data append=yes
- name: "change permission for dogslow logging dir"
  shell: chmod go+rwx /var/log/dogslow
  sudo: yes
- name: "make judge file directory"
  file: path={{item}} state=directory owner=www-data group=www-data
  sudo: yes
  sudo_user: www-data
  with_items:
    - /www-media/judge-attachments/997880217dc5432e5425aca9fab8c317
    - /www-media/judge-attachments/67dfd95b87cff6ac5af6af76fc18f38e
    - /www-media/judge-attachments/232c7247113c383f420354144212679d
    - /www-media/judge-attachments/62684055ea23fd739ee1071724794592

- name: "copy judging data for example problem"
  copy: src=../dev_data/plus.in dest=/www-media/judge-attachments/997880217dc5432e5425aca9fab8c317/plus.in owner=www-data
  sudo: yes

- name: "copy judging data for example problem (output)"
  copy: src=../dev_data/plus.out dest=/www-media/judge-attachments/67dfd95b87cff6ac5af6af76fc18f38e/plus.out owner=www-data
  sudo: yes

- name: "copy judging data for example problem"
  copy: src=../dev_data/helloworld.in dest=/www-media/judge-attachments/232c7247113c383f420354144212679d/helloworld.in owner=www-data
  sudo: yes

- name: "copy judging data for example problem (output)"
  copy: src=../dev_data/helloworld.out dest=/www-media/judge-attachments/62684055ea23fd739ee1071724794592/helloworld.out owner=www-data
  sudo: yes

- name: "include everyone in 'everyone' group"
  shell: ./manage.py include_everyone chdir={{django_dir}}

- name: "patch psql table for guardian"
  shell: psql algospot < base/queries/patch_psql_table.sql chdir={{django_dir}}

- name: "copy psql configurations (so root can access database, needed for celeryd)"
  copy: src={{item}} dest=/etc/postgresql/9.3/main/ backup=yes
  sudo: yes
  with_items:
    - ../configs/{{config_name}}/pg_hba.conf
    - ../configs/{{config_name}}/pg_ident.conf

- name: "copy celery runner"
  copy: src=../configs/{{config_name}}/celeryd_initd dest=/etc/init.d/celeryd
  sudo: yes

- name: "change permission for celery runner"
  shell: chmod go+rwx /etc/init.d/celeryd
  sudo: yes

- name: "copy celery config"
  copy: src=../configs/{{config_name}}/celeryd_config dest=/etc/default/celeryd
  sudo: yes

- name: "make celery directories"
  file: path={{item}} state=directory
  with_items:
    - /var/run/celery
    - /var/log/celery
  sudo: yes

- name: "install celeryd service"
  shell: update-rc.d celeryd defaults 99 01
  sudo: yes

- name: "create runner account for sandboxing"
  user: name=runner
  sudo: yes

- name: "copy nginx conf"
  copy: src=../configs/{{config_name}}/nginx dest=/etc/nginx/sites-available/default backup=yes
  sudo: yes

- name: "make uwsgi conf dir"
  file: path=/etc/uwsgi/apps-enabled state=directory
  sudo: yes

- name: "copy uwsgi conf"
  copy: src=../configs/{{config_name}}/uwsgi.ini dest=/etc/uwsgi/apps-enabled backup=yes
  sudo: yes

- name: "copy uwsgi upstart conf"
  copy: src=../configs/{{config_name}}/uwsgi.conf dest=/etc/init/ backup=yes
  sudo: yes

- name: "make /var/www"
  file: path=/var/www state=directory
  sudo: yes

- name: "make /var/www open for www-data"
  shell: chmod go+rwx /var/www
  sudo: yes

- name: "install linux-image-extra (needed for aufs)"
  shell: apt-get install -y linux-image-extra-`uname -r`
  sudo: yes

- name: "register cron entry for update_index"
  cron: name="update search index" minute="0,30" job="cd {{django_dir}}; ./manage.py update_index" user="www-data" cron_file="update-index-job"
  sudo: yes
